// bigint Test Program
//
// Tests:  times_10, uses ==
//
// NEED TO IMPLEMENT
//
#include <iostream>
#include <cassert>
#include "bigint.hpp"

//===========================================================================
int main () {
    {
        //------------------------------------------------------
        // Setup fixture
        bigint bi(3);

        // Test 
        bi = bi.times10(0);

        // Verify
        assert(bi == 3);  //Wrong. Will FAIL, fix and add tests cases
    }
    {
        //------------------------------------------------------
        // Setup fixture
        bigint bi(200);

        // Test 
        bi = bi.times10(3);

        // Verify
        assert(bi == 200000); 
    }
    {
        //------------------------------------------------------
        // Setup fixture
        bigint bi(323130);

        // Test 
        bi = bi.times10(0);

        // Verify
        assert(bi == 323130);  
    }
    {
        //------------------------------------------------------
        // Setup fixture
        bigint bi("12312313121323003024929149101232131");

        // Test 
        bi = bi.times10(6);

        // Verify
        assert(bi == "12312313121323003024929149101232131000000"); 
    }
    {
        //------------------------------------------------------
        // Setup fixture
        bigint bi("12312313121323003024929149101232131");

        // Test 
        bi = bi.times10(6);

        // Verify
        assert(bi == "12312313121323003024929149101232131000000"); 
    }
    {
        //------------------------------------------------------
        // Setup fixture
        bigint bi("99999999999999999999999999999999999999999");

        // Test 
        bi = bi.times10(2);

        // Verify
        assert(bi == "9999999999999999999999999999999999999999900"); 
    }
    {
        //------------------------------------------------------
        // Setup fixture
        bigint bi("900000");

        // Test 
        bi = bi.times10(3);

        // Verify
        assert(bi == "900000000"); 
    }
    {
        //------------------------------------------------------
        // Setup fixture
        bigint bi("0000000000001");

        // Test 
        bi = bi.times10(4);

        // Verify
        assert(bi == "00000000000010000"); 
    }
    {
        //------------------------------------------------------
        // Setup fixture
        bigint bi("000000000000100000");

        // Test 
        bi = bi.times10(4);

        // Verify
        assert(bi == "0000000000001000000000"); 
    }
    {
        //------------------------------------------------------
        // Setup fixture
        bigint bi("000000000000100000999");

        // Test 
        bi = bi.times10(4);

        // Verify
        assert(bi == "0000000000001000009990000"); 
    }
    {
        //------------------------------------------------------
        // Setup fixture
        bigint bi("2313000000000000100000999");

        // Test 
        bi = bi.times10(10);

        // Verify
        assert(bi == "23130000000000001000009990000000000"); 
    }
    {
        //------------------------------------------------------
        // Setup fixture
        bigint bi("0");

        // Test 
        bi = bi.times10(1);

        // Verify
        assert(bi == "00"); 
    }
    {
        //------------------------------------------------------
        // Setup fixture
        bigint bi("01");

        // Test 
        bi = bi.times10(20);

        // Verify
        assert(bi == "0100000000000000000000"); 
    }
    {
        //------------------------------------------------------
        // Setup fixture
        bigint bi("1");

        // Test 
        bi = bi.times10(20);

        // Verify
        assert(bi == "0100000000000000000000"); 
    }
    {
        //------------------------------------------------------
        // Setup fixture
        bigint bi("900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000");

        // Test 
        bi = bi.times10(1);

        // Verify
        assert(bi == "9000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"); 
    }
    //Add test cases as needed.

    std::cout << "Done testing times_10" << std::endl;
    return 0;
}

